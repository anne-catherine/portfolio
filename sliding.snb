{"metadata":{"name":"sliding","user_save_timestamp":"1969-12-31T19:00:00.000Z","auto_save_timestamp":"1969-12-31T19:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customArgs":null,"customSparkConf":null},"cells":[{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"0986B545348F41C4AD206ED42C32C2EE"},"cell_type":"code","source":"import org.apache.spark.mllib.feature.Word2Vec\nimport org.apache.spark.mllib.feature.Word2VecModel\nimport scala.io.Source\n","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.feature.Word2Vec\nimport org.apache.spark.mllib.feature.Word2VecModel\nimport scala.io.Source\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":1,"time":"Took: 2 seconds 518 milliseconds, at 2016-12-19 23:56"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab504145719-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"CBCF9934FF254069AB20A78B62E49D32"},"cell_type":"code","source":"\nval f = \"/Users/annethompson/Desktop/Parsed.Corpus.txt\"\nval lines  = Source.fromFile(f).getLines.toVector\n\nval wds = lines.map(l => l.split(\" \").filterNot(_.isEmpty))\nval pairLists = wds.map(ar => ar.sliding(2).toVector.map {pair => pair.mkString(\"_\")}) \n                    \nval input = sc.parallelize(pairLists)\n                    \n","outputs":[{"name":"stdout","output_type":"stream","text":"f: String = /Users/annethompson/Desktop/Parsed.Corpus.txt\nlines: Vector[String] = Vector(\"lex33116.1_littera  C Caesaris lex18103.1_consul  lex45009.1_reddo  lex10313.1_aegreo _aegrum lex10298.1_aeger  lex9104.1_ab  lex27244.1_hic  lex28357.1_impetro lex28355.1_impetratus  lex50141.1_sum1 lex22274.1_edo1  lex50520.1_superus lex50146.1_summa lex50190.1_summum  lex52181.1_tribunus  lex41161.1_plebs lex41175.1_pleo  lex18205.1_contentio  lex53023.1_ut  lex28556.1_in  lex47584.1_senatus  lex44879.1_recito  lex53023.1_ut  lex53544.1_vero2 lex53608.1_verum2 lex53607.1_verum lex53611.1_verus  lex23489.1_ex  lex33116.1_littera  lex9671.1_ad  lex47584.1_senatus  lex45089.1_refero  lex28357.1_impetro  lex36503.1_non  lex41607.1_possum  lex45089.1_refero  lex18103.1_consul lex18109.1_consulo  lex1..."},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":2,"time":"Took: 4 seconds 412 milliseconds, at 2016-12-19 23:56"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab1545710575-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"26DE58B73FEC4A0A91B9167C358B0BBA"},"cell_type":"code","source":"input\n","outputs":[{"name":"stdout","output_type":"stream","text":"res3: org.apache.spark.rdd.RDD[scala.collection.immutable.Vector[String]] = ParallelCollectionRDD[0] at parallelize at <console>:83\n"},{"metadata":{},"data":{"text/html":"ParallelCollectionRDD[0] at parallelize at &lt;console&gt;:83"},"output_type":"execute_result","execution_count":3,"time":"Took: 2 seconds 774 milliseconds, at 2016-12-19 23:56"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"83E8714A7DFE46A49B974F987C613D33"},"cell_type":"markdown","source":"Here I used the sliding function so that my code would read the corpus with a window of two word vectors at a time, to account for the word vectors _res_ and _publica_. When the noun _res_ (thing, matter) combines with the adjective _publica_ (public), they are translated as \"the Republic\", and refer to the Roman Republic, which existed for about 480 years after the monarchy was overthrown, and before the Roman Empire was established. In the cell below, the cosine of the angle between the word vectors \"lex45597.1_res\\_\\_publica\" and \"lex9671.1\\_ad\\_Caesarem\" is about 0.89. Since the cosine of 0Â° is 1, I know that that angle between these two word vectors must be quite small. The smaller the angle is between them, the more similar the word vectors. These vectors cluster close in vector space because they tend to occur with the same other words as each other in the corpus. \n\n\nOf course, Caesar is not a true synonym for _res\\_\\_publica_ (the Republic). However, the fact that these two word vectors cluster together in vector space indicates that Caesar must have written about himself and the Republic using the same words (ie their respective contexts are similar) in the text of _Commentarii de Bello Civili_. Thus, this phenomenon evinces a strong correlation between Caesaer's identity (or how he wished to depict his identity) and the Republic. If Caesar's own self-concept was truly this enmeshed in the Republic, it is conceivable that the Republic could be \"dearer to him than life\", and that 'dignity' of the Republic could be \"his first (objective)\" (1.9.2). In this way, the manuscripts that include _rei publicae_ do not seem so far-fetched.\n"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"BB542C408569481E87D7DDF74385EA8E"},"cell_type":"code","source":"val word2vec = new Word2Vec()\nval model = word2vec.fit(input)\nval neighbors = 15\n\n\nval word = \"lex45597.1_res__publica\"\n\nval synonyms = model.findSynonyms (word,neighbors)\nfor ((synonym, cosineSimilarity) <- synonyms) {\nprintln(s\"$synonym $cosineSimilarity\")\n\n}","outputs":[{"name":"stdout","output_type":"stream","text":"lex45018.1_redeo_lex45597.1_res 0.8950673952787289\nlex9671.1_ad_Caesarem 0.8878837465732121\nlex45867.1_reus_lex45018.1_redeo 0.8869693535095723\nlex48473.1_solus1_lex48472.1_solus 0.8679608207828597\nlex31616.1_is_lex51184.1_tempus 0.8413592214380085\n_reliquum_lex45293.1_reliquus 0.8292163002979326\n_cum_lex28556.1_in 0.8099981630764892\nlex28556.1_in_lex38847.1_pars 0.8086920423055262\nlex34229.1_maximus_lex35586.1_multus 0.8051901181604112\nlex9104.1_ab_lex22947.1_eo1 0.7984183624511182\n_secunda_lex47769.1_sequor 0.7896282738740911\nlex22948.1_eo2_lex31616.1_is 0.7695906115957828\nlex31616.1_is__locum 0.7648757195143406\n_locum_lex33185.1_locus 0.75044531627738\nlex31616.1_is_lex45867.1_reus 0.7434211056038237\nword2vec: org.apache.spark.mllib.feature.Word2Vec = org.apache.spark.mllib.feature.Word2Vec@1b1ee530\nmodel: org.apache.spark.mllib.feature.Word2VecModel = org.apache.spark.mllib.feature.Word2VecModel@2d299c9e\nneighbors: Int = 15\nword: String = lex45597.1_res__publica\nsynonyms: Array[(String, Double)] = Array((lex45018.1_redeo_lex45597.1_res,0.8950673952787289), (lex9671.1_ad_Caesarem,0.8878837465732121), (lex45867.1_reus_lex45018.1_redeo,0.8869693535095723), (lex48473.1_solus1_lex48472.1_solus,0.8679608207828597), (lex31616.1_is_lex51184.1_tempus,0.8413592214380085), (_reliquum_lex45293.1_reliquus,0.8292163002979326), (_cum_lex28556.1_in,0.8099981630764892), (lex28556.1_in_lex38847.1_pars,0.8086920423055262), (lex34229.1_maximus_lex35586.1_multus,0.8051901181604112), (lex9104.1_ab_lex22..."},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":7,"time":"Took: 3 seconds 300 milliseconds, at 2016-12-20 0:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab1462911400-0\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"DB646EB6639B4FFC8E0C91853CCBA2EA"},"cell_type":"code","source":"val vocab = model.getVectors.map { case (k,arr) => k }.toVector\nvocab.filter(_.contains(\"publ\") ).filter(_.contains(\"res\"))","outputs":[{"name":"stdout","output_type":"stream","text":"vocab: Vector[String] = Vector(lex25821.1_frumentum, lex24140.1_expugno, lex34290.1_medio, lex35645.1_munitio, lex54043.1_viso, lex30770.1_intercedo, lex12994.1_autem, lex40446.1_perturbo, lex31176.1_intra, lex39622.1_perduco, lex30844.1_interficio, lex39911.1_peritus, lex9437.1_accido1, lex21759.1_divus, lex21017.1_difficultas, lex31868.1_judicium, lex50756.1_sustineo, lex31998.1_juvo, Macedoniam, lex48232.1_singulus, lex16836.1_commutatio, lex32413.1_later, _teneri, lex51700.1_tollo, lex43344.1_propter, lex33706.1_magis, lex15568.1_circos, lex48701.1_spes, lex38197.1_os1, lex14454.1_capitum, lex42813.1_probo, lex17001.1_comporto, lex44421.1_quidam, lex13508.1_bini, lex32581.1_legatum, _polliceo, Lentulus, lex11724.1_aperto, lex10584.1_agger, lex22118.1_durus, lex9515.1_acer2, lex54012..."},{"metadata":{},"data":{"text/html":"empty seq"},"output_type":"execute_result","execution_count":178,"time":"Took: 6 seconds 315 milliseconds, at 2016-12-15 20:50"}]}],"nbformat":4}